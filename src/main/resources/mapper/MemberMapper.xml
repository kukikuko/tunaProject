<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--   mapper 태그에 namespace 속성은 연동시키고자 하는 Mapper 인터페이스명을 경로와 함께 명시 -->
 
 
  <mapper namespace="com.project.TunaProject.repository.mybatis.MemberMapper">
	
	<insert id="memberInsert" parameterType="MemberVO">
  		insert into TUNA_MEMBER 
  		values
  		(
  		TUNA_memberCode.nextVal,
  		#{memberMail},
  		#{password},
  		#{memberName},
  		#{memberBirth},
  		#{memberNick},
  		#{memberPN},
  		#{memberAddr1},
  		#{memberAddr2},
  		#{memberAddr3},
  		#{memberAddr4},
  		0,
  		sysdate
  		)
  	</insert>
  	
<!--   	로그인 -->
  	<select id="selectByEmail" resultType="MemberVO">
		select memberCode, membermail, password, memberName, memberBirth, memberNick,
		
		 (SELECT SUBSTR(memberPN, 1, INSTR(memberPN, '-', 1, 1) - 1) from tuna_member where membermail = #{email}) memberPN1,
		 (SELECT SUBSTR(memberPN, INSTR(memberPN, '-', 1, 1) + 1, INSTR(memberPN, '-', 1, 2)- INSTR(memberPN, '-', 1, 1) - 1)  FROM tuna_member where membermail = #{email})memberPN2,
		  (SELECT SUBSTR(memberPN, INSTR(memberPN, '-', 1, 2) + 1) FROM tuna_member where membermail = #{email})memberPN3,
		 
		  memberAddr1,
		  memberAddr2,
		  memberAddr3,
		  memberAddr4
		  from tuna_member
		where membermail = #{email}
	</select>
	
<!-- 	개인정보 변경 -->
	<update id="updateMemberByEmail" parameterType="MemberVO">
	UPDATE tuna_member
	set memberName = #{memberName},
    memberNick = #{memberNick},
    memberPN = #{memberPN1}||'-'||#{memberPN2}||'-'||#{memberPN3},
    memberAddr1 = #{memberAddr1},
    memberAddr2 = #{memberAddr2},
    memberAddr3 = #{memberAddr3},
    memberAddr4 = #{memberAddr4}
	where memberMail = #{memberMail}
	</update>
	
	<update id="updatePassword">
	UPDATE tuna_member
	set password = #{password}
	where memberMail = #{memberMail}
	</update>
	
	
	<delete id="deleteMember">
	delete from tuna_member
    where membermail =#{memberMail}
	</delete>
	
<!-- 	회원가입시, 아이디 중복인지 체크 -->
	<select id="idCheck" resultType="Integer">
		select count(*) from tuna_member 
		where memberMail = #{email}
	</select>
	
<!-- 	이메일로 비밀번호를 찾는 메소드 -->
	<select id="emailFindPw" resultType="String">
		select password
		from tuna_member
		where memberMail= #{email}
	</select>
	
<!-- 	memberCode로 사용자가 작성한 글 보여주기 -->
	<select id="selectByMemberCode" resultType="Post">
	select * 
	from tuna_post 
	where pmemcode = #{memberCode}
	</select>
	
	
  </mapper>